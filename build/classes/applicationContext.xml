<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
    
    <context:property-placeholder location="classpath:dbConfig.properties"/>
	<context:annotation-config />
	<context:component-scan base-package="com.my.service" />
	
<!-- 	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> -->
<!-- 		<property name="driverClassName"> -->
<!-- 		      <value>com.mysql.jdbc.Driver</value> -->
<!-- 		</property> -->
<!-- 		<property name="url"> -->
<!-- 		      <value>jdbc:mysql://localhost:3306/how2java</value> -->
<!-- 		</property> -->
<!-- 		<property name="username"> -->
<!-- 		      <value>root</value> -->
<!-- 		</property> -->
<!-- 		<property name="password"> -->
<!-- 		      <value>123456</value> -->
<!-- 		</property> -->
<!-- 	</bean> -->
	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		  destroy-method="close">
		  
		  <!-- 基本属性 -->
		  <property name="url" value="${jdbc.url}"/>
		  <property name="driverClassName" value="${jdbc.driverClassName}"/>
		  <property name="username" value="${jdbc.username}"/>
		  <property name="password" value="${jdbc.password}"/>
		  
		  <!-- 配置初始化大小、最小、最大 -->
		  <property name="initialSize" value="3" />
		  <property name="minIdle" value="3" />
		  <property name="maxIdle" value="20" />
		  
		  <!-- 配置获取连接等待超时的时间 -->
		  <property name="maxWait" value="60000"/>
		  
		  <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		  <property name="timeBetweenEvictionRunsMillis" value="60000" />
		  
		  <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		  <property name="minEvictableIdleTimeMillis" value="30000" />
		  
		  <property name="validationQuery" value="SELECT 1"/>
		  <property name="testWhileIdle" value="true" />
		  <property name="testOnBorrow" value="false" />
          <property name="testOnReturn" value="false" />
		  
		  <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
          <property name="poolPreparedStatements" value="true" />
          <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	</bean>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
	     <property name="typeAliasesPackage" value="com.my.pojo" />
	     <property name="dataSource" ref="dataSource"/>
	     <property name="mapperLocations" value="classpath:com/my/mapper/*.xml"/>
	     <property name="plugins">
	           <array>
	                <bean class="com.github.pagehelper.PageInterceptor">
	                     <property name="properties">
	                          <value></value>
	                     </property>
	                </bean>
	           </array>
	     </property>	
	</bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	    <property name="basePackage" value="com.my.mapper"/>
	</bean>
	
	<!-- 配置事务管理器，事务注解扫描器 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 基于xml的方式配置事务，需要AOP操作 -->
<!-- 	<tx:advice id="txadvice" transaction-manager="transactionManager">  -->
<!--         <tx:attributes>  -->
<!--             <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" />  -->
<!--             <tx:method name="del*" propagation="REQUIRED" rollback-for="Exception"/> -->
<!--             <tx:method name="edit*" propagation="REQUIRED" rollback-for="Exception" /> -->
<!--             <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>  -->
<!--             <tx:method name="list*" propagation="REQUIRED" rollback-for="Exception"/>  -->
<!--         </tx:attributes>  -->
<!--     </tx:advice>  -->
        
<!--     <aop:config>  -->
<!--         <aop:pointcut id="serviceMethod" expression="execution(* com.my.service.*.*(..))"/>  -->
<!--         <aop:advisor pointcut-ref="serviceMethod" advice-ref="txadvice"/>  -->
<!--     </aop:config>       -->
</beans>
